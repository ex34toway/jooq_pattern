/**
 * This class is generated by jOOQ
 */
package com.nanhu.model.sys.tables;


import com.nanhu.model.sys.Keys;
import com.nanhu.model.sys.SpringBoot;
import com.nanhu.model.sys.tables.records.SysLogRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * 操作日志表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SysLog extends TableImpl<SysLogRecord> {

    private static final long serialVersionUID = -410071350;

    /**
     * The reference instance of <code>spring_boot.sys_log</code>
     */
    public static final SysLog SYS_LOG = new SysLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SysLogRecord> getRecordType() {
        return SysLogRecord.class;
    }

    /**
     * The column <code>spring_boot.sys_log.id</code>. 日志ID
     */
    public final TableField<SysLogRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR.length(32).nullable(false), this, "日志ID");

    /**
     * The column <code>spring_boot.sys_log.operationName</code>. 操作类型
     */
    public final TableField<SysLogRecord, String> OPERATIONNAME = createField("operationName", org.jooq.impl.SQLDataType.VARCHAR.length(64).nullable(false), this, "操作类型");

    /**
     * The column <code>spring_boot.sys_log.operationContent</code>. 操作内容
     */
    public final TableField<SysLogRecord, String> OPERATIONCONTENT = createField("operationContent", org.jooq.impl.SQLDataType.VARCHAR.length(256).nullable(false), this, "操作内容");

    /**
     * The column <code>spring_boot.sys_log.operationUser</code>. 操作人
     */
    public final TableField<SysLogRecord, String> OPERATIONUSER = createField("operationUser", org.jooq.impl.SQLDataType.VARCHAR.length(32).nullable(false), this, "操作人");

    /**
     * The column <code>spring_boot.sys_log.operationDate</code>. 操作时间
     */
    public final TableField<SysLogRecord, Timestamp> OPERATIONDATE = createField("operationDate", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "操作时间");

    /**
     * Create a <code>spring_boot.sys_log</code> table reference
     */
    public SysLog() {
        this("sys_log", null);
    }

    /**
     * Create an aliased <code>spring_boot.sys_log</code> table reference
     */
    public SysLog(String alias) {
        this(alias, SYS_LOG);
    }

    private SysLog(String alias, Table<SysLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private SysLog(String alias, Table<SysLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "操作日志表");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return SpringBoot.SPRING_BOOT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SysLogRecord> getPrimaryKey() {
        return Keys.KEY_SYS_LOG_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SysLogRecord>> getKeys() {
        return Arrays.<UniqueKey<SysLogRecord>>asList(Keys.KEY_SYS_LOG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SysLog as(String alias) {
        return new SysLog(alias, this);
    }

    /**
     * Rename this table
     */
    public SysLog rename(String name) {
        return new SysLog(name, null);
    }
}
